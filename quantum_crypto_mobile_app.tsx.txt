import React, { useState, useEffect, useRef } from 'react';
import { TrendingUp, TrendingDown, Bell, Settings, RefreshCw, Menu, X, Home, BarChart3, Wallet, User, ChevronRight, AlertCircle, Zap, Info, Star, Plus } from 'lucide-react';

const QuantumCryptoMobileApp = () => {
  // الحالة العامة
  const [currentScreen, setCurrentScreen] = useState('home');
  const [selectedCrypto, setSelectedCrypto] = useState('bitcoin');
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  
  // البيانات الحقيقية
  const [cryptoData, setCryptoData] = useState({
    bitcoin: { price: 0, change: 0, volume: 0, loading: true },
    ethereum: { price: 0, change: 0, volume: 0, loading: true },
    binancecoin: { price: 0, change: 0, volume: 0, loading: true }
  });
  
  // المتغيرات الكمومية
  const [quantumVars, setQuantumVars] = useState({
    entropy: 0.5,
    curvature: 0.3,
    gradient: 0.6,
    psi: 0
  });
  
  // التنبيهات والإشعارات
  const [alerts, setAlerts] = useState([]);
  const [notifications, setNotifications] = useState([]);
  
  // المحفظة الافتراضية
  const [portfolio, setPortfolio] = useState([
    { crypto: 'bitcoin', amount: 0.05, buyPrice: 43000 },
    { crypto: 'ethereum', amount: 0.5, buyPrice: 2300 }
  ]);
  
  // الإعدادات
  const [settings, setSettings] = useState({
    notifications: true,
    darkMode: true,
    alertThreshold: 0.7,
    updateInterval: 30
  });

  const cryptoInfo = {
    bitcoin: { name: 'Bitcoin', symbol: 'BTC', icon: '₿', color: '#f7931a' },
    ethereum: { name: 'Ethereum', symbol: 'ETH', icon: 'Ξ', color: '#627eea' },
    binancecoin: { name: 'BNB', symbol: 'BNB', icon: '◆', color: '#f3ba2f' }
  };

  // جلب البيانات الحقيقية
  const fetchCryptoData = async () => {
    setIsLoading(true);
    try {
      const ids = Object.keys(cryptoData).join(',');
      const response = await fetch(
        `https://api.coingecko.com/api/v3/simple/price?ids=${ids}&vs_currencies=usd&include_24hr_change=true&include_24hr_vol=true`
      );
      
      if (response.ok) {
        const data = await response.json();
        const newData = {};
        
        Object.keys(data).forEach(key => {
          newData[key] = {
            price: data[key].usd || 0,
            change: data[key].usd_24h_change || 0,
            volume: data[key].usd_24h_vol || 0,
            loading: false
          };
          
          // تحديث المتغيرات الكمومية
          if (key === selectedCrypto) {
            updateQuantumVars(data[key]);
          }
        });
        
        setCryptoData(newData);
      }
    } catch (error) {
      console.error('Error fetching data:', error);
    } finally {
      setIsLoading(false);
    }
  };

  // تحديث المتغيرات الكمومية
  const updateQuantumVars = (data) => {
    const entropy = Math.max(0.3, Math.min(1, (data.usd_24h_vol || 0) / 100000000000));
    const curvature = Math.min(1, Math.abs(data.usd_24h_change || 0) / 10);
    const gradient = Math.min(1, Math.abs(data.usd_24h_change || 0) / 10);
    const psi = calculatePsi(entropy, curvature, gradient);
    
    setQuantumVars({ entropy, curvature, gradient, psi });
    
    // كشف الأنماط
    detectPatterns(psi, entropy, curvature, gradient);
  };

  // حساب Ψ
  const calculatePsi = (S, R, gradI) => {
    let psi = 0;
    const t = Date.now() / 10000;
    
    for (let i = 1; i <= 5; i++) {
      const lambda = Math.exp(-i * 0.2);
      const vonNeumann = -S * Math.log(S + 0.01);
      const volatility = R * Math.sin(i * t * 0.1);
      const newsImpact = gradI * Math.cos(i * t * 0.15);
      psi += lambda * vonNeumann * volatility * newsImpact;
    }
    
    return psi / Math.sqrt(1 + gradI * gradI);
  };

  // كشف الأنماط
  const detectPatterns = (psi, entropy, curvature, gradient) => {
    const newAlerts = [];
    
    if (curvature > 0.8 && entropy > 0.85 && gradient > 0.7) {
      newAlerts.push({
        type: 'danger',
        title: 'ثقب أسود مالي!',
        message: `${cryptoInfo[selectedCrypto].name} في منطقة خطر`,
        crypto: selectedCrypto,
        timestamp: Date.now()
      });
    }
    
    if (psi > 0.5 && gradient > 0.75) {
      newAlerts.push({
        type: 'opportunity',
        title: 'فرصة شراء محتملة',
        message: `تضخم معلوماتي في ${cryptoInfo[selectedCrypto].name}`,
        crypto: selectedCrypto,
        timestamp: Date.now()
      });
    }
    
    if (newAlerts.length > 0 && settings.notifications) {
      setNotifications(prev => [...newAlerts, ...prev].slice(0, 10));
    }
  };

  // التحديث التلقائي
  useEffect(() => {
    fetchCryptoData();
    const interval = setInterval(fetchCryptoData, settings.updateInterval * 1000);
    return () => clearInterval(interval);
  }, [selectedCrypto, settings.updateInterval]);

  // حساب الأرباح/الخسائر
  const calculatePnL = (crypto) => {
    const holding = portfolio.find(p => p.crypto === crypto);
    if (!holding) return { pnl: 0, percent: 0 };
    
    const currentPrice = cryptoData[crypto]?.price || 0;
    const pnl = (currentPrice - holding.buyPrice) * holding.amount;
    const percent = ((currentPrice - holding.buyPrice) / holding.buyPrice) * 100;
    
    return { pnl, percent };
  };

  // الشاشة الرئيسية
  const HomeScreen = () => (
    <div className="p-4 pb-20">
      {/* الرأسية */}
      <div className="mb-6">
        <h1 className="text-2xl font-bold mb-1">محلل العملات الكمومي</h1>
        <p className="text-gray-400 text-sm">تحليل ذكي بالفيزياء الكمومية</p>
      </div>

      {/* بطاقة العملة المختارة */}
      <div className="bg-gradient-to-br from-blue-600 to-purple-600 rounded-3xl p-6 mb-6 shadow-2xl">
        <div className="flex justify-between items-start mb-4">
          <div>
            <p className="text-white/80 text-sm mb-1">السعر الحالي</p>
            <div className="flex items-baseline gap-2">
              <span className="text-4xl font-bold text-white">
                ${cryptoData[selectedCrypto]?.price.toLocaleString() || '0'}
              </span>
              <span className="text-xl text-white/90">
                {cryptoInfo[selectedCrypto].symbol}
              </span>
            </div>
          </div>
          <div className="text-5xl">{cryptoInfo[selectedCrypto].icon}</div>
        </div>
        
        <div className="flex items-center gap-2 mb-4">
          {cryptoData[selectedCrypto]?.change >= 0 ? (
            <TrendingUp className="text-green-300" size={20} />
          ) : (
            <TrendingDown className="text-red-300" size={20} />
          )}
          <span className={`text-lg font-bold ${
            cryptoData[selectedCrypto]?.change >= 0 ? 'text-green-300' : 'text-red-300'
          }`}>
            {cryptoData[selectedCrypto]?.change >= 0 ? '+' : ''}
            {cryptoData[selectedCrypto]?.change.toFixed(2)}%
          </span>
          <span className="text-white/70 text-sm">24 ساعة</span>
        </div>

        {/* المؤشر الكمومي */}
        <div className="bg-white/10 backdrop-blur-sm rounded-2xl p-4">
          <div className="flex justify-between items-center mb-2">
            <span className="text-white/90 text-sm">المؤشر الكمومي Ψ</span>
            <span className="text-white font-bold">{quantumVars.psi.toFixed(3)}</span>
          </div>
          <div className="h-2 bg-white/20 rounded-full overflow-hidden">
            <div 
              className={`h-full transition-all duration-500 ${
                quantumVars.psi > 0 ? 'bg-green-400' : 'bg-red-400'
              }`}
              style={{ width: `${Math.min(Math.abs(quantumVars.psi) * 100, 100)}%` }}
            />
          </div>
          <p className="text-white/70 text-xs mt-2">
            {quantumVars.psi > 0.5 ? '🚀 صعود قوي' : 
             quantumVars.psi < -0.5 ? '⚠️ هبوط حاد' : 
             '📊 استقرار نسبي'}
          </p>
        </div>
      </div>

      {/* اختيار العملات */}
      <div className="mb-6">
        <h3 className="text-lg font-bold mb-3">العملات المتاحة</h3>
        <div className="grid grid-cols-3 gap-3">
          {Object.entries(cryptoInfo).map(([key, info]) => (
            <button
              key={key}
              onClick={() => setSelectedCrypto(key)}
              className={`p-4 rounded-2xl transition-all ${
                selectedCrypto === key
                  ? 'bg-gradient-to-br from-blue-600 to-purple-600 scale-105 shadow-lg'
                  : 'bg-slate-800 hover:bg-slate-700'
              }`}
            >
              <div className="text-3xl mb-2">{info.icon}</div>
              <div className="text-xs font-bold">{info.symbol}</div>
              <div className={`text-xs mt-1 ${
                cryptoData[key]?.change >= 0 ? 'text-green-400' : 'text-red-400'
              }`}>
                {cryptoData[key]?.change >= 0 ? '+' : ''}
                {cryptoData[key]?.change.toFixed(1)}%
              </div>
            </button>
          ))}
        </div>
      </div>

      {/* المتغيرات الكمومية */}
      <div className="bg-slate-800 rounded-2xl p-4 mb-6">
        <h3 className="text-lg font-bold mb-4 flex items-center gap-2">
          <Zap className="text-yellow-400" size={20} />
          المتغيرات الكمومية
        </h3>
        
        <div className="space-y-4">
          <div>
            <div className="flex justify-between text-sm mb-2">
              <span className="text-gray-400">S(ρ) إنتروبيا</span>
              <span className="text-yellow-400 font-bold">{quantumVars.entropy.toFixed(3)}</span>
            </div>
            <div className="h-2 bg-slate-700 rounded-full overflow-hidden">
              <div 
                className="h-full bg-yellow-500 transition-all"
                style={{ width: `${quantumVars.entropy * 100}%` }}
              />
            </div>
          </div>

          <div>
            <div className="flex justify-between text-sm mb-2">
              <span className="text-gray-400">R_μν انحناء</span>
              <span className="text-purple-400 font-bold">{quantumVars.curvature.toFixed(3)}</span>
            </div>
            <div className="h-2 bg-slate-700 rounded-full overflow-hidden">
              <div 
                className="h-full bg-purple-500 transition-all"
                style={{ width: `${quantumVars.curvature * 100}%` }}
              />
            </div>
          </div>

          <div>
            <div className="flex justify-between text-sm mb-2">
              <span className="text-gray-400">|∇I| تدرج</span>
              <span className="text-blue-400 font-bold">{quantumVars.gradient.toFixed(3)}</span>
            </div>
            <div className="h-2 bg-slate-700 rounded-full overflow-hidden">
              <div 
                className="h-full bg-blue-500 transition-all"
                style={{ width: `${quantumVars.gradient * 100}%` }}
              />
            </div>
          </div>
        </div>
      </div>

      {/* الإشعارات الأخيرة */}
      {notifications.length > 0 && (
        <div className="bg-slate-800 rounded-2xl p-4">
          <h3 className="text-lg font-bold mb-3 flex items-center gap-2">
            <Bell className="text-blue-400" size={20} />
            الإشعارات
          </h3>
          <div className="space-y-2">
            {notifications.slice(0, 3).map((notif, idx) => (
              <div 
                key={idx}
                className={`p-3 rounded-xl ${
                  notif.type === 'danger' ? 'bg-red-900/30 border border-red-600' :
                  'bg-green-900/30 border border-green-600'
                }`}
              >
                <p className="font-bold text-sm mb-1">{notif.title}</p>
                <p className="text-xs text-gray-400">{notif.message}</p>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );

  // شاشة التحليل
  const AnalysisScreen = () => (
    <div className="p-4 pb-20">
      <h2 className="text-2xl font-bold mb-6">التحليل الكمومي التفصيلي</h2>
      
      {/* التنبؤ */}
      <div className="bg-gradient-to-br from-purple-900/50 to-blue-900/50 rounded-2xl p-6 mb-6 border border-purple-500/30">
        <h3 className="text-lg font-bold mb-4">التنبؤ الذكي</h3>
        <div className="text-center mb-4">
          <div className="text-5xl mb-2">
            {quantumVars.psi > 0.5 ? '🚀' : 
             quantumVars.psi < -0.5 ? '⚠️' : '📊'}
          </div>
          <p className="text-2xl font-bold mb-2">
            {quantumVars.psi > 0.5 ? 'صعود قوي متوقع' : 
             quantumVars.psi < -0.5 ? 'هبوط محتمل' : 
             'استقرار نسبي'}
          </p>
          <p className="text-gray-400">
            الثقة: {Math.min(95, 60 + Math.abs(quantumVars.psi) * 50).toFixed(0)}%
          </p>
        </div>

        <div className="bg-black/30 rounded-xl p-4">
          <p className="text-sm text-gray-300 mb-2">التحليل:</p>
          <p className="text-xs text-gray-400 leading-relaxed">
            {quantumVars.entropy > 0.7 ? 'إنتروبيا عالية - كثافة معلوماتية. ' : ''}
            {quantumVars.curvature > 0.7 ? 'تقلبات قوية في السوق. ' : ''}
            {quantumVars.gradient > 0.7 ? 'الأخبار تنتشر بسرعة. ' : ''}
            {quantumVars.psi > 0.5 ? 'جميع المؤشرات تشير لضغط شراء قوي.' :
             quantumVars.psi < -0.5 ? 'إشارات تحذيرية - احتمالية هبوط.' :
             'السوق في حالة توازن نسبي.'}
          </p>
        </div>
      </div>

      {/* نقاط القوة والضعف */}
      <div className="grid grid-cols-2 gap-4 mb-6">
        <div className="bg-green-900/20 border border-green-600 rounded-2xl p-4">
          <h4 className="font-bold mb-2 text-green-400">نقاط القوة</h4>
          <ul className="text-xs space-y-1 text-gray-300">
            {quantumVars.psi > 0 && <li>• زخم إيجابي</li>}
            {cryptoData[selectedCrypto]?.change > 0 && <li>• سعر صاعد</li>}
            {quantumVars.gradient < 0.5 && <li>• استقرار نسبي</li>}
            {quantumVars.entropy < 0.6 && <li>• معلومات واضحة</li>}
          </ul>
        </div>

        <div className="bg-red-900/20 border border-red-600 rounded-2xl p-4">
          <h4 className="font-bold mb-2 text-red-400">نقاط الضعف</h4>
          <ul className="text-xs space-y-1 text-gray-300">
            {quantumVars.curvature > 0.7 && <li>• تقلبات عالية</li>}
            {quantumVars.entropy > 0.8 && <li>• فوضى معلوماتية</li>}
            {cryptoData[selectedCrypto]?.change < -5 && <li>• هبوط حاد</li>}
            {quantumVars.psi < 0 && <li>• ضغط بيع</li>}
          </ul>
        </div>
      </div>

      {/* توصيات */}
      <div className="bg-slate-800 rounded-2xl p-4">
        <h3 className="text-lg font-bold mb-3 flex items-center gap-2">
          <Info className="text-blue-400" size={20} />
          التوصيات
        </h3>
        <div className="space-y-3">
          <div className="flex items-start gap-3 p-3 bg-slate-700 rounded-xl">
            <div className="text-2xl">💡</div>
            <div className="flex-1">
              <p className="font-bold text-sm mb-1">
                {quantumVars.psi > 0.5 ? 'فرصة شراء محتملة' :
                 quantumVars.psi < -0.5 ? 'تجنب الشراء حالياً' :
                 'راقب السوق'}
              </p>
              <p className="text-xs text-gray-400">
                {quantumVars.psi > 0.5 ? 'المؤشرات إيجابية لكن احذر التقلبات' :
                 quantumVars.psi < -0.5 ? 'انتظر استقرار السوق قبل الدخول' :
                 'لا توجد إشارات واضحة - انتظر'}
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  // شاشة المحفظة
  const PortfolioScreen = () => {
    const totalValue = portfolio.reduce((sum, holding) => {
      const currentPrice = cryptoData[holding.crypto]?.price || 0;
      return sum + (currentPrice * holding.amount);
    }, 0);

    const totalCost = portfolio.reduce((sum, holding) => {
      return sum + (holding.buyPrice * holding.amount);
    }, 0);

    const totalPnL = totalValue - totalCost;
    const totalPnLPercent = (totalPnL / totalCost) * 100;

    return (
      <div className="p-4 pb-20">
        <h2 className="text-2xl font-bold mb-6">المحفظة</h2>
        
        {/* القيمة الإجمالية */}
        <div className="bg-gradient-to-br from-green-600 to-emerald-600 rounded-3xl p-6 mb-6 shadow-2xl">
          <p className="text-white/80 text-sm mb-1">القيمة الإجمالية</p>
          <p className="text-4xl font-bold text-white mb-4">
            ${totalValue.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
          </p>
          
          <div className="flex items-center gap-2">
            {totalPnL >= 0 ? (
              <TrendingUp className="text-white" size={20} />
            ) : (
              <TrendingDown className="text-white" size={20} />
            )}
            <span className="text-xl font-bold text-white">
              {totalPnL >= 0 ? '+' : ''}${Math.abs(totalPnL).toFixed(2)}
            </span>
            <span className="text-white/80">
              ({totalPnL >= 0 ? '+' : ''}{totalPnLPercent.toFixed(2)}%)
            </span>
          </div>
        </div>

        {/* الحيازات */}
        <h3 className="text-lg font-bold mb-3">حيازاتك</h3>
        <div className="space-y-3 mb-6">
          {portfolio.map((holding, idx) => {
            const info = cryptoInfo[holding.crypto];
            const current = cryptoData[holding.crypto];
            const { pnl, percent } = calculatePnL(holding.crypto);
            
            return (
              <div key={idx} className="bg-slate-800 rounded-2xl p-4">
                <div className="flex items-center justify-between mb-3">
                  <div className="flex items-center gap-3">
                    <div className="text-3xl">{info.icon}</div>
                    <div>
                      <p className="font-bold">{info.name}</p>
                      <p className="text-sm text-gray-400">{holding.amount} {info.symbol}</p>
                    </div>
                  </div>
                  <div className="text-right">
                    <p className="font-bold">
                      ${(current?.price * holding.amount).toFixed(2)}
                    </p>
                    <p className={`text-sm ${pnl >= 0 ? 'text-green-400' : 'text-red-400'}`}>
                      {pnl >= 0 ? '+' : ''}${pnl.toFixed(2)}
                    </p>
                  </div>
                </div>

                <div className="flex justify-between text-xs text-gray-400">
                  <span>سعر الشراء: ${holding.buyPrice}</span>
                  <span className={pnl >= 0 ? 'text-green-400' : 'text-red-400'}>
                    {pnl >= 0 ? '+' : ''}{percent.toFixed(2)}%
                  </span>
                </div>
              </div>
            );
          })}
        </div>

        <button className="w-full bg-blue-600 hover:bg-blue-700 py-4 rounded-2xl font-bold flex items-center justify-center gap-2 transition">
          <Plus size={20} />
          إضافة عملة جديدة
        </button>
      </div>
    );
  };

  // شاشة الإعدادات
  const SettingsScreen = () => (
    <div className="p-4 pb-20">
      <h2 className="text-2xl font-bold mb-6">الإعدادات</h2>
      
      <div className="space-y-4">
        <div className="bg-slate-800 rounded-2xl p-4">
          <div className="flex justify-between items-center">
            <div>
              <p className="font-bold">الإشعارات</p>
              <p className="text-sm text-gray-400">تلقي تنبيهات الفرص والمخاطر</p>
            </div>
            <button 
              onClick={() => setSettings(s => ({ ...s, notifications: !s.notifications }))}
              className={`w-12 h-6 rounded-full transition ${
                settings.notifications ? 'bg-green-600' : 'bg-gray-600'
              }`}
            >
              <div className={`w-5 h-5 bg-white rounded-full transition transform ${
                settings.notifications ? 'translate-x-6' : 'translate-x-1'
              }`} />
            </button>
          </div>
        </div>

        <div className="bg-slate-800 rounded-2xl p-4">
          <p className="font-bold mb-3">فترة التحديث</p>
          <select 
            value={settings.updateInterval}
            onChange={(e) => setSettings(s => ({ ...s, updateInterval: parseInt(e.target.value) }))}
            className="w-full bg-slate-700 p-3 rounded-xl"
          >
            <option value={10}>10 ثواني</option>
            <option value={30}>30 ثانية</option>
            <option value={60}>دقيقة واحدة</option>
            <option value={300}>5 دقائق</option>
          </select>
        </div>

        <div className="bg-slate-800 rounded-2xl p-4">
          <p className="font-bold mb-3">حساسية التنبيهات</p>
          <input
            type="range"
            min="0.5"
            max="0.9"
            step="0.1"
            value={settings.alertThreshold}
            onChange={(e) => setSettings(s => ({ ...s, alertThreshold: parseFloat(e.target.value) }))}
            className="w-full accent-blue-600"
          />
          <p className="text-sm text-gray-400 mt-2">
            {settings.alertThreshold === 0.5 ? 'عالية جداً' :
             settings.alertThreshold === 0.7 ? 'متوسطة' :
             'منخفضة'}
          </p>
        </div>

        <div className="bg-gradient-to-br from-blue-900/30 to-purple-900/30 rounded-2xl p-4 border border-blue-500/30">
          <h3 className="font-bold mb-2 text-blue-300">عن التطبيق</h3>
          <p className="text-sm text-gray-400 mb-2">
            محلل العملات الكمومي v1.0
          </p>
          <p className="text-xs text-gray-500">
            يستخدم معادلة الانحناء الكمومي للزمكان المعلوماتي لتحليل أسواق العملات الرقمية
          </p>
        </div>
      </div>
    </div>
  );

  // شريط التنقل السفلي
  const BottomNav = () => (
    <div className="fixed bottom-0 left-0 right-0 bg-slate-900 border-t border-slate-700 px-4 py-3">
      <div className="flex justify-around items-center max-w-md mx-auto">
        <button
          onClick={() => setCurrentScreen('home')}
          className={`flex flex-col items-center gap-1 transition ${
            currentScreen === 'home' ? 'text-blue-400' : 'text-gray-400'
          }`}
        >
          <Home size={24} />
          <span className="text-xs">الرئيسية</span>
        </button>

        <button
          onClick={() => setCurrentScreen('analysis')}
          className={`flex flex-col items-center gap-1 transition ${
            currentScreen === 'analysis' ? 'text-blue-400' : 'text-gray-400'
          }`}
        >
          <BarChart3 size={24} />
          <span className="text-xs">التحليل</span>
        </button>

        <button
          onClick={() => setCurrentScreen('portfolio')}
          className={`flex flex-col items-center gap-1 transition ${
            currentScreen === 'portfolio' ? 'text-blue-400' : 'text-gray-400'
          }`}
        >
          <Wallet size={24} />
          <span className="text-xs">المحفظة</span>
        </button>

        <button
          onClick={() => setCurrentScreen('settings')}
          className={`flex flex-col items-center gap-1 transition ${
            currentScreen === 'settings' ? 'text-blue-400' : 'text-gray-400'
          }`}
        >
          <Settings size={24} />
          <span className="text-xs">الإعدادات</span>
        </button>
      </div>
    </div>
  );

  // الشاشة الحالية
  const renderScreen = () => {
    switch (currentScreen) {
      case 'home': return <HomeScreen />;
      case 'analysis': return <AnalysisScreen />;
      case 'portfolio': return <PortfolioScreen />;
      case 'settings': return <SettingsScreen />;
      default: return <HomeScreen />;
    }
  };

  return (
    <div className="w-full min-h-screen bg-slate-950 text-white overflow-auto">
      {/* الهيدر */}
      <div className="sticky top-0 z-50 bg-slate-900/95 backdrop-blur-sm border-b border-slate-800">
        <div className="flex justify-between items-center p-4">
          <div className="flex items-center gap-3">
            <div className="w-10 h-10 bg-gradient-to-br from-blue-600 to-purple-600 rounded-full flex items-center justify-center text-xl font-bold">
              Ψ
            </div>
            <div>
              <h1 className="font-bold text-sm">محلل الكم</h1>
              <p className="text-xs text-gray-400">تحليل ذكي</p>
            </div>
          </div>

          <div className="flex items-center gap-3">
            <button 
              onClick={fetchCryptoData}
              className={`p-2 bg-slate-800 rounded-full hover:bg-slate-700 transition ${
                isLoading ? 'animate-spin' : ''
              }`}
              disabled={isLoading}
            >
              <RefreshCw size={20} />
            </button>

            {notifications.length > 0 && (
              <button className="relative p-2 bg-slate-800 rounded-full hover:bg-slate-700 transition">
                <Bell size={20} />
                <span className="absolute top-0 right-0 w-5 h-5 bg-red-600 rounded-full text-xs flex items-center justify-center">
                  {notifications.length}
                </span>
              </button>
            )}
          </div>
        </div>
      </div>

      {/* المحتوى */}
      <div className="relative">
        {renderScreen()}
      </div>

      {/* شريط التنقل */}
      <BottomNav />

      {/* شاشة التحميل */}
      {isLoading && (
        <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50">
          <div className="bg-slate-800 rounded-3xl p-8 text-center">
            <div className="w-16 h-16 border-4 border-blue-600 border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
            <p className="font-bold">جاري التحديث...</p>
          </div>
        </div>
      )}
    </div>
  );
};

export default QuantumCryptoMobileApp;